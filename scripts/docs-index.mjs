#!/usr/bin/env zx

import makeDebug from 'debug'
import { image, link } from '@thi.ng/transclude'
// import fs from 'node:fs'
// import { fs, path } from 'zx'
// import 'zx/globals'
import { throwIfNotInvokedFromMonorepoRoot } from './utils.mjs'

// Usage (from the monorepo root):
// ./scripts/docs-index.mjs

throwIfNotInvokedFromMonorepoRoot(process.env.PWD)

const debug = makeDebug(`script:docs-index`)

const REPO_ROOT = process.env.PWD
const SCRIPT_NAME = path.basename(__filename)

// TODO: add a Jekyll theme?
// https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/adding-a-theme-to-your-github-pages-site-using-jekyll

const HEADER = [
  `The documentation for each package is automatically generated by ${link('TypeDoc', 'https://typedoc.org/')}.`
].join('\n')

const FOOTER = [
  `ðŸ¤– Page generated by running the ${link('script', 'https://github.com/jackdbd/undici/tree/main/scripts/README.md')} \`${SCRIPT_NAME}\``
].join('\n')

const main = ({
  excluded,
  github_username,
  npm_scope,
  output,
  package_names
}) => {
  const items = package_names
    .filter((s) => !excluded.includes(s))
    .map((unscoped_pkg_name) => {
      const pkg_href = `https://github.com/${github_username}/undici/tree/main/packages/${unscoped_pkg_name}`
      const scoped_pkg_name = `${npm_scope}/${unscoped_pkg_name}`
      const home = link(scoped_pkg_name, pkg_href)

      // The docs/ directory is published to GitHub pages. Each package of this
      // monorepo is under a subdirectory of the docs/ directory.
      const typedoc = link('Docs', `./${unscoped_pkg_name}/index.html`)

      const npm_version = link(
        image(
          `https://badge.fury.io/js/${npm_scope}%2F${unscoped_pkg_name}.svg`,
          'npm version'
        ),
        `https://badge.fury.io/js/${npm_scope}%2F${unscoped_pkg_name}`
        // `https://www.npmjs.com/package/${npm_scope}/${unscoped_pkg_name}`
      )

      const install_size = link(
        image(
          `https://packagephobia.com/badge?p=${npm_scope}/${unscoped_pkg_name}`,
          'install size'
        ),
        `https://packagephobia.com/result?p=${npm_scope}/${unscoped_pkg_name}`
      )

      const socket = link(
        image(
          `https://socket.dev/api/badge/npm/package/${npm_scope}/${unscoped_pkg_name}`,
          'Socket Badge'
        ),
        `https://socket.dev/npm/package/${npm_scope}/${unscoped_pkg_name}`
      )

      const codecov = link(
        image(
          `https://codecov.io/gh/${github_username}/${unscoped_pkg_name}/graph/badge.svg?token=9jddzo5Dt3`,
          'CodeCov badge'
        ),
        `https://codecov.io/gh/${github_username}/${unscoped_pkg_name}`
      )

      return {
        coverage: codecov,
        docs: typedoc,
        home,
        install_size,
        version: npm_version,
        vulnerabilities: socket
      }
    })

  debug(`create table with ${items.length} rows`)
  const rows = items.map((d) => {
    const row = [
      d.home,
      d.version,
      d.install_size,
      d.docs,
      d.coverage,
      d.vulnerabilities
    ].join(' | ')
    return `| ${row} |`
  })

  const table = [
    `| Package | Version | Install size | Docs | Coverage | Vulnerabilities |`,
    '|---|---|---|---|---|---|',
    rows.join('\n')
  ].join('\n')

  const md = `${HEADER}\n\n${table}\n\n${FOOTER}`
  fs.writeFileSync(output, md, { encoding: 'utf8' })
  debug(`wrote ${output}`)
}

main({
  excluded: ['demo-site', 'eleventy-test-utils', 'text-to-audio-asset'],
  github_username: 'jackdbd',
  package_names: fs.readdirSync(path.join(REPO_ROOT, 'packages')),
  npm_scope: '@jackdbd',
  output: path.join(REPO_ROOT, 'docs', 'README.md')
})
