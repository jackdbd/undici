{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.39.4",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!",
  "docComment": "",
  "name": "@jackdbd/eleventy-plugin-text-to-speech",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!Config:type",
          "docComment": "/**\n * Configuration for this Eleventy plugin.\n *\n * @interface\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Config = "
            },
            {
              "kind": "Reference",
              "text": "z.input",
              "canonicalReference": "zod!input:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "config",
              "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!config:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/eleventy/plugin.ts",
          "releaseTag": "Public",
          "name": "Config",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!config:var",
          "docComment": "/**\n * Config of this Eleventy plugin.\n *\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "config: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "zod!ZodObject:class"
            },
            {
              "kind": "Content",
              "text": "<{\n    collectionName: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "zod!ZodDefault:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "zod!ZodString:class"
            },
            {
              "kind": "Content",
              "text": ">;\n    rules: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodArray",
              "canonicalReference": "zod!ZodArray:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "zod!ZodObject:class"
            },
            {
              "kind": "Content",
              "text": "<{\n        audioInnerHTML: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "zod!ZodOptional:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodFunction",
              "canonicalReference": "zod!ZodFunction:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodTuple",
              "canonicalReference": "zod!ZodTuple:class"
            },
            {
              "kind": "Content",
              "text": "<["
            },
            {
              "kind": "Reference",
              "text": "z.ZodArray",
              "canonicalReference": "zod!ZodArray:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "zod!ZodString:class"
            },
            {
              "kind": "Content",
              "text": ", \"many\">], "
            },
            {
              "kind": "Reference",
              "text": "z.ZodUnknown",
              "canonicalReference": "zod!ZodUnknown:class"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "zod!ZodString:class"
            },
            {
              "kind": "Content",
              "text": ">>;\n        cssSelectors: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "zod!ZodDefault:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodEffects",
              "canonicalReference": "zod!ZodEffects:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodArray",
              "canonicalReference": "zod!ZodArray:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "zod!ZodString:class"
            },
            {
              "kind": "Content",
              "text": ", \"many\">, string[], string[]>>;\n        hosting: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "zod!ZodObject:class"
            },
            {
              "kind": "Content",
              "text": "<{\n            config: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "zod!ZodObject:class"
            },
            {
              "kind": "Content",
              "text": "<{}, \"passthrough\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "z.objectOutputType",
              "canonicalReference": "zod!objectOutputType:type"
            },
            {
              "kind": "Content",
              "text": "<{}, "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", \"passthrough\">, "
            },
            {
              "kind": "Reference",
              "text": "z.objectInputType",
              "canonicalReference": "zod!objectInputType:type"
            },
            {
              "kind": "Content",
              "text": "<{}, "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", \"passthrough\">>;\n            write: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodFunction",
              "canonicalReference": "zod!ZodFunction:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodTuple",
              "canonicalReference": "zod!ZodTuple:class"
            },
            {
              "kind": "Content",
              "text": "<[], "
            },
            {
              "kind": "Reference",
              "text": "z.ZodUnknown",
              "canonicalReference": "zod!ZodUnknown:class"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "z.ZodPromise",
              "canonicalReference": "zod!ZodPromise:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodUnion",
              "canonicalReference": "zod!ZodUnion:class"
            },
            {
              "kind": "Content",
              "text": "<["
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "zod!ZodObject:class"
            },
            {
              "kind": "Content",
              "text": "<{\n                error: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodType",
              "canonicalReference": "zod!ZodType:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeDef",
              "canonicalReference": "zod!ZodTypeDef:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n                value: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "zod!ZodOptional:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodUndefined",
              "canonicalReference": "zod!ZodUndefined:class"
            },
            {
              "kind": "Content",
              "text": ">;\n            }, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }, {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>, "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "zod!ZodObject:class"
            },
            {
              "kind": "Content",
              "text": "<{\n                error: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "zod!ZodOptional:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodUndefined",
              "canonicalReference": "zod!ZodUndefined:class"
            },
            {
              "kind": "Content",
              "text": ">;\n                value: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "zod!ZodObject:class"
            },
            {
              "kind": "Content",
              "text": "<{\n                    href: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "zod!ZodString:class"
            },
            {
              "kind": "Content",
              "text": ";\n                    message: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "zod!ZodString:class"
            },
            {
              "kind": "Content",
              "text": ";\n                }, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n                    message: string;\n                    href: string;\n                }, {\n                    message: string;\n                    href: string;\n                }>;\n            }, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n                value: {\n                    message: string;\n                    href: string;\n                };\n                error?: undefined;\n            }, {\n                value: {\n                    message: string;\n                    href: string;\n                };\n                error?: undefined;\n            }>]>>>;\n        }, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            write: (...args: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: {\n                    message: string;\n                    href: string;\n                };\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        }, {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            write: (...args: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: {\n                    message: string;\n                    href: string;\n                };\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        }>;\n        regex: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "zod!ZodDefault:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodType",
              "canonicalReference": "zod!ZodType:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeDef",
              "canonicalReference": "zod!ZodTypeDef:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            },
            {
              "kind": "Content",
              "text": ">>;\n        synthesis: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "zod!ZodObject:class"
            },
            {
              "kind": "Content",
              "text": "<{\n            config: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "zod!ZodObject:class"
            },
            {
              "kind": "Content",
              "text": "<{}, \"passthrough\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "z.objectOutputType",
              "canonicalReference": "zod!objectOutputType:type"
            },
            {
              "kind": "Content",
              "text": "<{}, "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", \"passthrough\">, "
            },
            {
              "kind": "Reference",
              "text": "z.objectInputType",
              "canonicalReference": "zod!objectInputType:type"
            },
            {
              "kind": "Content",
              "text": "<{}, "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", \"passthrough\">>;\n            extension: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "zod!ZodString:class"
            },
            {
              "kind": "Content",
              "text": ";\n            synthesize: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodFunction",
              "canonicalReference": "zod!ZodFunction:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodTuple",
              "canonicalReference": "zod!ZodTuple:class"
            },
            {
              "kind": "Content",
              "text": "<["
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "zod!ZodString:class"
            },
            {
              "kind": "Content",
              "text": "], "
            },
            {
              "kind": "Reference",
              "text": "z.ZodUnknown",
              "canonicalReference": "zod!ZodUnknown:class"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "z.ZodPromise",
              "canonicalReference": "zod!ZodPromise:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodUnion",
              "canonicalReference": "zod!ZodUnion:class"
            },
            {
              "kind": "Content",
              "text": "<["
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "zod!ZodObject:class"
            },
            {
              "kind": "Content",
              "text": "<{\n                error: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodType",
              "canonicalReference": "zod!ZodType:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeDef",
              "canonicalReference": "zod!ZodTypeDef:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n                value: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "zod!ZodOptional:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodUndefined",
              "canonicalReference": "zod!ZodUndefined:class"
            },
            {
              "kind": "Content",
              "text": ">;\n            }, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }, {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>, "
            },
            {
              "kind": "Reference",
              "text": "z.ZodObject",
              "canonicalReference": "zod!ZodObject:class"
            },
            {
              "kind": "Content",
              "text": "<{\n                error: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodOptional",
              "canonicalReference": "zod!ZodOptional:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodUndefined",
              "canonicalReference": "zod!ZodUndefined:class"
            },
            {
              "kind": "Content",
              "text": ">;\n                value: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodType",
              "canonicalReference": "zod!ZodType:class"
            },
            {
              "kind": "Content",
              "text": "<import(\"stream\")."
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\".internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeDef",
              "canonicalReference": "zod!ZodTypeDef:interface"
            },
            {
              "kind": "Content",
              "text": ", import(\"stream\")."
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\".internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ">;\n            }, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n                value: import(\"stream\")."
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\".internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ";\n                error?: undefined;\n            }, {\n                value: import(\"stream\")."
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\".internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ";\n                error?: undefined;\n            }>]>>>;\n        }, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            extension: string;\n            synthesize: (args_0: string, ...args_1: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: import(\"stream\")."
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\".internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ";\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        }, {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            extension: string;\n            synthesize: (args_0: string, ...args_1: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: import(\"stream\")."
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\".internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ";\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        }>;\n        xPathExpressions: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "zod!ZodDefault:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodEffects",
              "canonicalReference": "zod!ZodEffects:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodArray",
              "canonicalReference": "zod!ZodArray:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "zod!ZodString:class"
            },
            {
              "kind": "Content",
              "text": ", \"many\">, string[], string[]>>;\n    }, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n        cssSelectors: string[];\n        hosting: {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            write: (...args: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: {\n                    message: string;\n                    href: string;\n                };\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        };\n        regex: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            },
            {
              "kind": "Content",
              "text": ";\n        synthesis: {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            extension: string;\n            synthesize: (args_0: string, ...args_1: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: import(\"stream\")."
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\".internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ";\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        };\n        xPathExpressions: string[];\n        audioInnerHTML?: ((args_0: string[], ...args_1: unknown[]) => string) | undefined;\n    }, {\n        hosting: {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            write: (...args: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: {\n                    message: string;\n                    href: string;\n                };\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        };\n        synthesis: {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            extension: string;\n            synthesize: (args_0: string, ...args_1: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: import(\"stream\")."
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\".internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ";\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        };\n        audioInnerHTML?: ((args_0: string[], ...args_1: unknown[]) => string) | undefined;\n        cssSelectors?: string[] | undefined;\n        regex?: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n        xPathExpressions?: string[] | undefined;\n    }>, \"many\">;\n    transformName: "
            },
            {
              "kind": "Reference",
              "text": "z.ZodDefault",
              "canonicalReference": "zod!ZodDefault:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "z.ZodString",
              "canonicalReference": "zod!ZodString:class"
            },
            {
              "kind": "Content",
              "text": ">;\n}, \"strip\", "
            },
            {
              "kind": "Reference",
              "text": "z.ZodTypeAny",
              "canonicalReference": "zod!ZodTypeAny:type"
            },
            {
              "kind": "Content",
              "text": ", {\n    rules: {\n        cssSelectors: string[];\n        hosting: {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            write: (...args: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: {\n                    message: string;\n                    href: string;\n                };\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        };\n        regex: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            },
            {
              "kind": "Content",
              "text": ";\n        synthesis: {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            extension: string;\n            synthesize: (args_0: string, ...args_1: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: import(\"stream\")."
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\".internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ";\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        };\n        xPathExpressions: string[];\n        audioInnerHTML?: ((args_0: string[], ...args_1: unknown[]) => string) | undefined;\n    }[];\n    collectionName: string;\n    transformName: string;\n}, {\n    rules: {\n        hosting: {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            write: (...args: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: {\n                    message: string;\n                    href: string;\n                };\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        };\n        synthesis: {\n            config: {} & {\n                [k: string]: unknown;\n            };\n            extension: string;\n            synthesize: (args_0: string, ...args_1: unknown[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n                value: import(\"stream\")."
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\".internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ";\n                error?: undefined;\n            } | {\n                error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n                value?: undefined;\n            }>;\n        };\n        audioInnerHTML?: ((args_0: string[], ...args_1: unknown[]) => string) | undefined;\n        cssSelectors?: string[] | undefined;\n        regex?: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n        xPathExpressions?: string[] | undefined;\n    }[];\n    collectionName?: string | undefined;\n    transformName?: string | undefined;\n}>"
            }
          ],
          "fileUrlPath": "src/eleventy/plugin.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "config",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 259
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!DEBUG_PREFIX:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEBUG_PREFIX = "
            },
            {
              "kind": "Content",
              "text": "\"11ty-plugin:TTS\""
            }
          ],
          "fileUrlPath": "src/constants.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DEBUG_PREFIX",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!DEFAULT_COLLECTION_NAME:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_COLLECTION_NAME = "
            },
            {
              "kind": "Content",
              "text": "\"audio-items\""
            }
          ],
          "fileUrlPath": "src/constants.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DEFAULT_COLLECTION_NAME",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!DEFAULT_TRANSFORM_NAME:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_TRANSFORM_NAME = "
            },
            {
              "kind": "Content",
              "text": "\"inject-audio-tags-into-html\""
            }
          ],
          "fileUrlPath": "src/constants.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DEFAULT_TRANSFORM_NAME",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!defaultAudioInnerHTML:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "defaultAudioInnerHTML: "
            },
            {
              "kind": "Content",
              "text": "(hrefs: string[]) => string"
            }
          ],
          "fileUrlPath": "src/audio-html.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "defaultAudioInnerHTML",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!Hosting:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Hosting = "
            },
            {
              "kind": "Reference",
              "text": "z.input",
              "canonicalReference": "zod!input:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "hosting",
              "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!~hosting:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/hosting/schemas.ts",
          "releaseTag": "Public",
          "name": "Hosting",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!mediaType:var",
          "docComment": "/**\n * The `<audio>` tag supports 3 audio formats: MP3 (audio/mpeg), WAV (audio/wav), and OGG (audio/ogg).\n *\n * @see\n *\n * [wikipedia.org - Supported media types in various browsers](https://en.wikipedia.org/wiki/HTML5_audio)\n *\n * @see\n *\n * [stackoverflow.com - HTML5 audio Browsers unable to decode wav file encoded with IMA ADPCM](https://stackoverflow.com/questions/36866611/html5-audio-browsers-unable-to-decode-wav-file-encoded-with-ima-adpcm)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "mediaType: "
            },
            {
              "kind": "Content",
              "text": "(ext: string) => {\n    value: string;\n    error?: undefined;\n} | {\n    error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    value?: undefined;\n}"
            }
          ],
          "fileUrlPath": "src/media-type.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "mediaType",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!Rule:type",
          "docComment": "/**\n * Rule defining how text should be synthesized by a text-to-speech client, and where the generated audio asset/s should be hosted.\n *\n * @interface\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Rule = "
            },
            {
              "kind": "Reference",
              "text": "z.infer",
              "canonicalReference": "zod!TypeOf:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "rule",
              "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!~rule:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/schemas/rule.ts",
          "releaseTag": "Public",
          "name": "Rule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!Synthesis:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Synthesis = "
            },
            {
              "kind": "Reference",
              "text": "z.input",
              "canonicalReference": "zod!input:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "synthesis",
              "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!~synthesis:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/synthesis/schemas.ts",
          "releaseTag": "Public",
          "name": "Synthesis",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!Synthesize:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Synthesize = "
            },
            {
              "kind": "Reference",
              "text": "z.infer",
              "canonicalReference": "zod!TypeOf:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "synthesize_func",
              "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!~synthesize_func:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/synthesis/schemas.ts",
          "releaseTag": "Public",
          "name": "Synthesize",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!SynthesizeResult:type",
          "docComment": "/**\n * Synthesize result.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SynthesizeResult = "
            },
            {
              "kind": "Reference",
              "text": "z.infer",
              "canonicalReference": "zod!TypeOf:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "synthesize_result",
              "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!~synthesize_result:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/synthesis/schemas.ts",
          "releaseTag": "Public",
          "name": "SynthesizeResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!textToAudioAsset:var",
          "docComment": "/**\n * Synthesizes some text into a readable stream representing the speech. Then it generates an audio asset from that speech.\n *\n * @param config - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "textToAudioAsset: "
            },
            {
              "kind": "Content",
              "text": "(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!~Config_2:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n    error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    value?: undefined;\n} | {\n    value: {\n        message: string;\n        href: string;\n    };\n    error?: undefined;\n}>"
            }
          ],
          "fileUrlPath": "src/text-to-audio-asset.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "textToAudioAsset",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!textToSpeechPlugin:var",
          "docComment": "/**\n * Adds Text-to-Speech functionality to an Eleventy site.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "textToSpeechPlugin: "
            },
            {
              "kind": "Content",
              "text": "(eleventyConfig: "
            },
            {
              "kind": "Reference",
              "text": "EleventyConfig",
              "canonicalReference": "!\"\\\"@11ty/eleventy\\\"\".EleventyConfig:interface"
            },
            {
              "kind": "Content",
              "text": ", config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!Config:type"
            },
            {
              "kind": "Content",
              "text": ") => void"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "textToSpeechPlugin",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!Write:type",
          "docComment": "/**\n * Write function.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Write = "
            },
            {
              "kind": "Reference",
              "text": "z.infer",
              "canonicalReference": "zod!TypeOf:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "write_func",
              "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!~write_func:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/hosting/schemas.ts",
          "releaseTag": "Public",
          "name": "Write",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!WriteResult:type",
          "docComment": "/**\n * Write result.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WriteResult = "
            },
            {
              "kind": "Reference",
              "text": "z.infer",
              "canonicalReference": "zod!TypeOf:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "write_result",
              "canonicalReference": "@jackdbd/eleventy-plugin-text-to-speech!~write_result:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/hosting/schemas.ts",
          "releaseTag": "Public",
          "name": "WriteResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        }
      ]
    }
  ]
}
